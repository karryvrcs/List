package dev.lpa;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;

// Records are [immutable] data classes that require only the type and name of fields.
// The equals, hashCode, and to String methods, as well as the private, final fields and public constructor, are generated by the Java compiler.
// So we don't have to write a lot of boilerplate code!
record GroceryItem(String name, String type, int count){


    // the default constructor with three argument is already created behind the scenes.
    public GroceryItem (String name){
        this(name, "DAIRY", 1);
    }

    @Override
    public String toString(){
        return String.format("%d %s in %s", count, name.toUpperCase(), type);
    }
}

public class Main {

    public static void main(String[] args) {

        // ArrayList implements the List's interface methods.
        // ArrayList实现了List接口的方法

        // ArrayList: ArrayList is resizeable.
        // ArrayList is a class, that really maintains an array in memory, that's actually bigger than what we need, in most cases
        // It keeps track of the capacity, which is the actual size ot the array in memory.
        // But it also keeps track of the elements that've been assigned or set, which is the size of the ArrayList.
        // As elements are added to an ArrayList, its capacity may need to grow.
        // This all happens automatically, behind the scenes.

        // Declare the arrays with specific types.
        GroceryItem[] groceryArray = new GroceryItem[3];
        groceryArray[0] = new GroceryItem("milk");
        groceryArray[1] = new GroceryItem("apples", "PRODUCE", 6);
        groceryArray[2] = new GroceryItem("oranges", "PRODUCE", 5);
        System.out.println(Arrays.toString(groceryArray));

        // Bad practice.
        // If we don't specify the type of ArrayList, it will use the Object Class by default.
        // ArrayList will receive any instance of Object like String what we don't expect to happen.
        ArrayList objectList = new ArrayList();
        objectList.add(new GroceryItem("Butter"));
        objectList.add("Yogurt");

        // Good practice: explicitly specify the type of Arraylist in angle brackets
        ArrayList<GroceryItem> groceryList = new ArrayList<>();
        // Add an element to the end of the list.
        groceryList.add(new GroceryItem("Butter"));
        groceryList.add(new GroceryItem("milk"));
        System.out.println();
        System.out.println("Print out the GroceryItem ArrayList directly:");
        System.out.println(groceryList);
        System.out.println();
        System.out.println("Add an element at index 1:");
        groceryList.add(1, new GroceryItem("apples", "PRODUCE", 6));
        System.out.println(groceryList);
        System.out.println();
        System.out.println("Replace the elements at index 2 with Orange using set method");
        groceryList.set(2, new GroceryItem("Orange", "PRODUCE", 1));
        System.out.println(groceryList);
        System.out.println("size: " + groceryList.size());
        System.out.println();

        System.out.println("remove the first element in the array using remove method");
        groceryList.remove(0);
        System.out.println(groceryList);
        System.out.println("size: " + groceryList.size());


    }
}